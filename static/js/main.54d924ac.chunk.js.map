{"version":3,"sources":["components/wrapper/index.js","components/navbar/index.js","components/gamecard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Nav","href","message","score","topScore","Gamecard","onClick","clickedCard","id","src","image","alt","App","state","images","unclickedImages","find","setState","filter","unclickedImage","console","log","shuffleArray","array","i","length","j","Math","floor","random","temp","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8rCAYeA,MAVf,SAAiBC,GACb,OACA,yBAAKC,UAAY,aACb,yBAAKA,UAAY,OACZD,EAAME,Y,aCQJC,MAXf,SAAcH,GACV,OACI,yBAAKC,UAAY,2CACb,uBAAGA,UAAY,eAAeG,KAAK,KAAI,uBAAGH,UAAW,8BAArD,sBACR,wBAAIA,UAAU,mBAAkB,wBAAIA,UAAU,cAAcD,EAAMK,UAClE,wBAAIJ,UAAW,mBAAkB,wBAAIA,UAAU,cAAd,UAAmCD,EAAMM,MAAzC,iBAA8DN,EAAMO,a,MCK1FC,MAVf,SAAkBR,GACd,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,YAAYQ,QAAS,kBAAIT,EAAMU,YAAYV,EAAMW,MAC5D,yBAAKC,IAAMZ,EAAMa,MAAOZ,UAAU,WAAWa,IAAKd,EAAMW,QC+EzDI,E,4MA9EdC,MAAQ,CACNX,QAAU,2BACVY,SACAC,gBAAkBD,EAClBX,MAAO,EACPC,SAAU,G,EAGZG,YAAc,SAAAC,GACT,EAAKK,MAAME,gBAAgBC,MAAK,SAAAN,GAAK,OAAGA,EAAMF,KAAOA,KACtD,EAAKS,SAAS,CACZd,MAAM,EAAKU,MAAMV,MAAO,EACxBY,gBAAkB,EAAKF,MAAME,gBAAgBG,QAAO,SAAAR,GAAK,OAAGA,EAAMF,KAAOA,KACzEN,QAAU,2BAGZ,EAAKe,SAAS,CACZf,QAAS,2BACTiB,eAAiB,EAAKN,MAAMC,OAC5BX,MAAQ,EACRC,SAAY,EAAKS,MAAMV,MAAQ,EAAKU,MAAMT,SAAY,EAAKS,MAAMV,MACjE,EAAKU,MAAMT,WAGfgB,QAAQC,IAAK,EAAKR,MAAME,kB,EAG1BO,aAAe,SAAAC,GAEb,IADA,IAAIC,EAAID,EAAME,OAAQ,EACfD,EAAI,EAAGA,IAAI,CAChB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAG,IACnCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,G,uDAGC,IAAD,OAER,OAEE,yBAAKzB,UAAU,OACb,4BAAQU,GAAG,YACX,kBAAC,EAAD,CACAN,QAAW6B,KAAKlB,MAAMX,QACtBC,MAAS4B,KAAKlB,MAAMV,MACpBC,SAAY2B,KAAKlB,MAAMT,YAGzB,yBAAKN,UAAU,4BAA4BU,GAAG,eAC5C,yBAAKV,UAAU,aACb,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,6EAGJ,kBAAC,EAAD,KACGiC,KAAKT,aAAaS,KAAKlB,MAAMC,QAAQkB,KAAI,SAAAtB,GAAK,OAC7C,kBAAC,EAAD,CACIH,YAAa,EAAKA,YAClBG,MAAOA,EAAMA,MACbF,GAAIE,EAAMF,GACVyB,IAAKvB,EAAMF,SAInB,4BAAQV,UAAU,kCAChB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UAAf,0BAA+C,0BAAMA,UAAU,uBAAhB,oB,GArErCoC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMlD,c","file":"static/js/main.54d924ac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Wrapper(props){\r\n    return(\r\n    <div className = \"container\">\r\n        <div className = \"row\">\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav (props){\r\n    return (\r\n        <nav className = \"navbar navbar-dark xx-primary fixed-top\">{}\r\n            <a className = \"navbar-brand\" href=\"/\"><i className =\"fas fa-mouse-pointer mr-3\"></i>Kitten Clicky Game</a>\r\n    <li className=\"navbar nav-item\"><h2 className=\"text-white\">{props.message}</h2></li>\r\n    <li className =\"navbar nav-item\"><h5 className=\"text-white\">Score: {props.score} | Top Score: {props.topScore}</h5>\r\n    </li>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav; ","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Gamecard(props){\r\n    return (\r\n        <div className=\"col-md-3\">\r\n            <div className=\"card grow\" onClick={()=>props.clickedCard(props.id)}>\r\n                <img src ={props.image} className=\"card-img\" alt={props.id}></img>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Gamecard;","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/wrapper\";\nimport images from \"./images.json\";\nimport Nav from \"./components/navbar\";\nimport Gamecard from \"./components/gamecard\";\n\nclass App extends Component {\n state = {\n   message : \"Click a kitten to begin!\",\n   images,\n   unclickedImages : images,\n   score: 0,\n   topScore: 0\n } \n\n clickedCard = id => {\n   if(this.state.unclickedImages.find(image=> image.id === id)){\n     this.setState({\n       score:this.state.score +1,\n       unclickedImages : this.state.unclickedImages.filter(image=> image.id !== id),\n       message : \"You guessed correctly!\",\n     });\n   } else {\n     this.setState({\n       message: \"You guessed incorrectly!\",\n       unclickedImage : this.state.images,\n       score : 0,\n       topScore : (this.state.score > this.state.topScore) ? this.state.score : \n       this.state.topScore\n     });\n   }\n   console.log (this.state.unclickedImages);\n }\n\n shuffleArray = array => {\n   let i = array.length -1;\n   for (; i > 0; i--){\n     const j = Math.floor(Math.random() * (i +1));\n     const temp = array[i];\n     array[i] = array[j];\n     array[j] = temp;\n   }\n   return array;\n }\n \n  render(){\n \n  return (\n  \n    <div className=\"App\">\n      <header id=\"beHeader\">\n      <Nav \n      message = {this.state.message}\n      score = {this.state.score}\n      topScore = {this.state.topScore}\n       />\n       </header>\n    <div className=\"jumbotron jumbotron-fluid\" id=\"jumboShrimp\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Kitten Clicky Game</h1>\n        <p className=\"lead\">Click on a kitten to earn points, but don't click on any more than once</p>\n      </div>\n    </div>\n    <Wrapper>\n      {this.shuffleArray(this.state.images).map(image =>\n        <Gamecard \n            clickedCard={this.clickedCard}\n            image={image.image}\n            id={image.id}\n            key={image.id}\n        />\n        )}\n    </Wrapper> \n    <footer className=\"xx-primary text-white p-4 mt-5\">\n      <div className=\"container\">\n        <div className=\"bottom\">Kitten Clicky Game! by <span className=\"badge badge-warning\">Oksana M</span>\n        </div>\n      </div>\n    </footer>\n    </div>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}